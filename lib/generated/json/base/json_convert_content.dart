// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:lanzhong/model/chat_message_entity.dart';
import 'package:lanzhong/model/dq_entity.dart';
import 'package:lanzhong/model/game2_entity.dart';
import 'package:lanzhong/model/game_entity.dart';
import 'package:lanzhong/model/gstatus_entity.dart';
import 'package:lanzhong/model/image_url_entity.dart';
import 'package:lanzhong/model/insert_entity.dart';
import 'package:lanzhong/model/kfpt_entity.dart';
import 'package:lanzhong/model/login_entity.dart';
import 'package:lanzhong/model/message_entity.dart';
import 'package:lanzhong/model/orders_entity.dart';
import 'package:lanzhong/model/person_entity.dart';
import 'package:lanzhong/model/platform_entity.dart';
import 'package:lanzhong/model/ptddh_entity.dart';
import 'package:lanzhong/model/ptzt_entity.dart';
import 'package:lanzhong/model/sub_entity.dart';
import 'package:lanzhong/model/tb_game_entity.dart';
import 'package:lanzhong/model/uploads_entity.dart';
import 'package:lanzhong/model/url_picture_entity.dart';
import 'package:lanzhong/model/version_entity.dart';
import 'package:lanzhong/model/xq_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(ChatMessageEntity).toString(): ChatMessageEntity.fromJson,
		(DqEntity).toString(): DqEntity.fromJson,
		(DqDllxs).toString(): DqDllxs.fromJson,
		(DqServers).toString(): DqServers.fromJson,
		(Game2Entity).toString(): Game2Entity.fromJson,
		(GameEntity).toString(): GameEntity.fromJson,
		(GstatusEntity).toString(): GstatusEntity.fromJson,
		(GstatusGames).toString(): GstatusGames.fromJson,
		(GstatusZts).toString(): GstatusZts.fromJson,
		(ImageUrlEntity).toString(): ImageUrlEntity.fromJson,
		(InsertEntity).toString(): InsertEntity.fromJson,
		(KfptEntity).toString(): KfptEntity.fromJson,
		(LoginEntity).toString(): LoginEntity.fromJson,
		(MessageEntity).toString(): MessageEntity.fromJson,
		(OrdersEntity).toString(): OrdersEntity.fromJson,
		(OrdersData).toString(): OrdersData.fromJson,
		(PersonEntity).toString(): PersonEntity.fromJson,
		(PersonGames).toString(): PersonGames.fromJson,
		(PersonPlats).toString(): PersonPlats.fromJson,
		(PlatformEntity).toString(): PlatformEntity.fromJson,
		(PtddhEntity).toString(): PtddhEntity.fromJson,
		(PtztEntity).toString(): PtztEntity.fromJson,
		(SubEntity).toString(): SubEntity.fromJson,
		(TbGameEntity).toString(): TbGameEntity.fromJson,
		(UploadsEntity).toString(): UploadsEntity.fromJson,
		(UploadsData).toString(): UploadsData.fromJson,
		(UrlPictureEntity).toString(): UrlPictureEntity.fromJson,
		(VersionEntity).toString(): VersionEntity.fromJson,
		(XqEntity).toString(): XqEntity.fromJson,
		(XqAreas).toString(): XqAreas.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<ChatMessageEntity>[] is M){
			return data.map<ChatMessageEntity>((Map<String, dynamic> e) => ChatMessageEntity.fromJson(e)).toList() as M;
		}
		if(<DqEntity>[] is M){
			return data.map<DqEntity>((Map<String, dynamic> e) => DqEntity.fromJson(e)).toList() as M;
		}
		if(<DqDllxs>[] is M){
			return data.map<DqDllxs>((Map<String, dynamic> e) => DqDllxs.fromJson(e)).toList() as M;
		}
		if(<DqServers>[] is M){
			return data.map<DqServers>((Map<String, dynamic> e) => DqServers.fromJson(e)).toList() as M;
		}
		if(<Game2Entity>[] is M){
			return data.map<Game2Entity>((Map<String, dynamic> e) => Game2Entity.fromJson(e)).toList() as M;
		}
		if(<GameEntity>[] is M){
			return data.map<GameEntity>((Map<String, dynamic> e) => GameEntity.fromJson(e)).toList() as M;
		}
		if(<GstatusEntity>[] is M){
			return data.map<GstatusEntity>((Map<String, dynamic> e) => GstatusEntity.fromJson(e)).toList() as M;
		}
		if(<GstatusGames>[] is M){
			return data.map<GstatusGames>((Map<String, dynamic> e) => GstatusGames.fromJson(e)).toList() as M;
		}
		if(<GstatusZts>[] is M){
			return data.map<GstatusZts>((Map<String, dynamic> e) => GstatusZts.fromJson(e)).toList() as M;
		}
		if(<ImageUrlEntity>[] is M){
			return data.map<ImageUrlEntity>((Map<String, dynamic> e) => ImageUrlEntity.fromJson(e)).toList() as M;
		}
		if(<InsertEntity>[] is M){
			return data.map<InsertEntity>((Map<String, dynamic> e) => InsertEntity.fromJson(e)).toList() as M;
		}
		if(<KfptEntity>[] is M){
			return data.map<KfptEntity>((Map<String, dynamic> e) => KfptEntity.fromJson(e)).toList() as M;
		}
		if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((Map<String, dynamic> e) => LoginEntity.fromJson(e)).toList() as M;
		}
		if(<MessageEntity>[] is M){
			return data.map<MessageEntity>((Map<String, dynamic> e) => MessageEntity.fromJson(e)).toList() as M;
		}
		if(<OrdersEntity>[] is M){
			return data.map<OrdersEntity>((Map<String, dynamic> e) => OrdersEntity.fromJson(e)).toList() as M;
		}
		if(<OrdersData>[] is M){
			return data.map<OrdersData>((Map<String, dynamic> e) => OrdersData.fromJson(e)).toList() as M;
		}
		if(<PersonEntity>[] is M){
			return data.map<PersonEntity>((Map<String, dynamic> e) => PersonEntity.fromJson(e)).toList() as M;
		}
		if(<PersonGames>[] is M){
			return data.map<PersonGames>((Map<String, dynamic> e) => PersonGames.fromJson(e)).toList() as M;
		}
		if(<PersonPlats>[] is M){
			return data.map<PersonPlats>((Map<String, dynamic> e) => PersonPlats.fromJson(e)).toList() as M;
		}
		if(<PlatformEntity>[] is M){
			return data.map<PlatformEntity>((Map<String, dynamic> e) => PlatformEntity.fromJson(e)).toList() as M;
		}
		if(<PtddhEntity>[] is M){
			return data.map<PtddhEntity>((Map<String, dynamic> e) => PtddhEntity.fromJson(e)).toList() as M;
		}
		if(<PtztEntity>[] is M){
			return data.map<PtztEntity>((Map<String, dynamic> e) => PtztEntity.fromJson(e)).toList() as M;
		}
		if(<SubEntity>[] is M){
			return data.map<SubEntity>((Map<String, dynamic> e) => SubEntity.fromJson(e)).toList() as M;
		}
		if(<TbGameEntity>[] is M){
			return data.map<TbGameEntity>((Map<String, dynamic> e) => TbGameEntity.fromJson(e)).toList() as M;
		}
		if(<UploadsEntity>[] is M){
			return data.map<UploadsEntity>((Map<String, dynamic> e) => UploadsEntity.fromJson(e)).toList() as M;
		}
		if(<UploadsData>[] is M){
			return data.map<UploadsData>((Map<String, dynamic> e) => UploadsData.fromJson(e)).toList() as M;
		}
		if(<UrlPictureEntity>[] is M){
			return data.map<UrlPictureEntity>((Map<String, dynamic> e) => UrlPictureEntity.fromJson(e)).toList() as M;
		}
		if(<VersionEntity>[] is M){
			return data.map<VersionEntity>((Map<String, dynamic> e) => VersionEntity.fromJson(e)).toList() as M;
		}
		if(<XqEntity>[] is M){
			return data.map<XqEntity>((Map<String, dynamic> e) => XqEntity.fromJson(e)).toList() as M;
		}
		if(<XqAreas>[] is M){
			return data.map<XqAreas>((Map<String, dynamic> e) => XqAreas.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}